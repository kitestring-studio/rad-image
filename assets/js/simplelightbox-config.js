(function () {
	// a modified clone of the php_vars object generated by simplelightbox-wp
	var rad_config = {
		// "ar_sl_sourceAttr": "href",
		// "ar_sl_overlay": "1",
		// "ar_sl_spinner": "1",
		// "ar_sl_nav": "1",
		// "ar_sl_navtextPrev": "\u2039",
		// "ar_sl_navtextNext": "\u203a",
		// "ar_sl_caption": "1",
		"ar_sl_captionSelector": "img",
		"ar_sl_captionType": "data",
		"ar_sl_captionData": "description",
		// "ar_sl_captionPosition": "bottom",
		// "ar_sl_captionDelay": "0",
		// "ar_sl_captionClass": "",
		"ar_sl_close": "0",
		// "ar_sl_closeText": "\u00d7",
		// "ar_sl_swipeClose": "1",
		// "ar_sl_showCounter": "1",
		// "ar_sl_fileExt": "png|jpg|jpeg|gif|webp",
		// "ar_sl_animationSpeed": "250",
		// "ar_sl_animationSlide": "1",
		// "ar_sl_preloading": "1",
		// "ar_sl_enableKeyboard": "1",
		// "ar_sl_loop": "1",
		// "ar_sl_rel": "false",
		// "ar_sl_docClose": "1",
		// "ar_sl_swipeTolerance": "50",
		// "ar_sl_className": "simple-lightbox",
		// "ar_sl_widthRatio": "0.8",
		// "ar_sl_heightRatio": "0.9",
		// "ar_sl_scaleImageToRatio": "",
		// "ar_sl_disableRightClick": "",
		// "ar_sl_disableScroll": "1",
		// "ar_sl_alertError": "1"
		// "ar_sl_alertErrorMessage": "Image not found, next image will be loaded",
		// "ar_sl_additionalHtml": "",
		// "ar_sl_history": "1",
		// "ar_sl_throttleInterval": "0",
		// "ar_sl_doubleTapZoom": "2",
		// "ar_sl_maxZoom": "10",
		// "ar_sl_htmlClass": "has-lightbox",
		// "ar_sl_rtl": "",
		// "ar_sl_fixedClass": "sl-fixed",
		// "ar_sl_fadeSpeed": "300",
		// "ar_sl_uniqueImages": "1",
		// "ar_sl_focus": "1",
		// "ar_sl_scrollZoom": "1",
		// "ar_sl_scrollZoomFactor": "0.5",
		// "ar_sl_useLegacy": "",
		// "ar_sl_additionalSelectors": "",
		// "ar_sl_overlayColor": "#ffffff",
		// "ar_sl_overlayOpacity": "0.7",
		// "ar_sl_btnColor": "#000000",
		// "ar_sl_loaderColor": "#333333",
		// "ar_sl_captionColor": "#000000",
		// "ar_sl_captionFontColor": "#ffffff",
		// "ar_sl_captionOpacity": "0.8",
		// "ar_sl_zindex": "1000"
	};
	// var rad_config = {"ar_sl_sourceAttr":"href","ar_sl_overlay":"1","ar_sl_spinner":"1","ar_sl_nav":"1","ar_sl_navtextPrev":"\u2039","ar_sl_navtextNext":"\u203a","ar_sl_caption":"1","ar_sl_captionSelector":"img","ar_sl_captionType":"attr","ar_sl_captionData":"alt","ar_sl_captionPosition":"bottom","ar_sl_captionDelay":"0","ar_sl_captionClass":"","ar_sl_close":"1","ar_sl_closeText":"\u00d7","ar_sl_swipeClose":"1","ar_sl_showCounter":"1","ar_sl_fileExt":"png|jpg|jpeg|gif|webp","ar_sl_animationSpeed":"250","ar_sl_animationSlide":"1","ar_sl_preloading":"1","ar_sl_enableKeyboard":"1","ar_sl_loop":"1","ar_sl_rel":"false","ar_sl_docClose":"1","ar_sl_swipeTolerance":"50","ar_sl_className":"simple-lightbox","ar_sl_widthRatio":"0.8","ar_sl_heightRatio":"0.9","ar_sl_scaleImageToRatio":"","ar_sl_disableRightClick":"","ar_sl_disableScroll":"1","ar_sl_alertError":"1","ar_sl_alertErrorMessage":"Image not found, next image will be loaded","ar_sl_additionalHtml":"","ar_sl_history":"1","ar_sl_throttleInterval":"0","ar_sl_doubleTapZoom":"2","ar_sl_maxZoom":"10","ar_sl_htmlClass":"has-lightbox","ar_sl_rtl":"","ar_sl_fixedClass":"sl-fixed","ar_sl_fadeSpeed":"300","ar_sl_uniqueImages":"1","ar_sl_focus":"1","ar_sl_scrollZoom":"1","ar_sl_scrollZoomFactor":"0.5","ar_sl_useLegacy":"","ar_sl_additionalSelectors":"","ar_sl_overlayColor":"#ffffff","ar_sl_overlayOpacity":"0.7","ar_sl_btnColor":"#000000","ar_sl_loaderColor":"#333333","ar_sl_captionColor":"#000000","ar_sl_captionFontColor":"#ffffff","ar_sl_captionOpacity":"0.8","ar_sl_zindex":"1000"};

	var options = {
		// sourceAttr: 	rad_config.ar_sl_sourceAttr,
		// overlay: 		(rad_config.ar_sl_overlay == '1') ? true : false,
		// overlayOpacity: parseFloat(rad_config.ar_sl_overlayOpacity),
		// spinner: 		(rad_config.ar_sl_spinner == '1') ? true : false,
		// nav: 			(rad_config.ar_sl_nav === '1') ? true : false,
		// navText:		[rad_config.ar_sl_navtextPrev,rad_config.ar_sl_navtextNext],
		// captions:		(rad_config.ar_sl_caption === '1') ? true : false,
		captionSelector: rad_config.ar_sl_captionSelector,
		captionType: rad_config.ar_sl_captionType,
		captionsData: rad_config.ar_sl_captionData,
		// captionPosition:rad_config.ar_sl_captionPosition,
		// captionDelay:   parseInt(rad_config.ar_sl_captionDelay,10),
		// captionClass:   rad_config.ar_sl_captionClass,
		close: true, //(rad_config.ar_sl_close === '1') ? true : false,
		// closeText:		rad_config.ar_sl_closeText,
		// showCounter:	(rad_config.ar_sl_showCounter === '1') ? true : false,
		// fileExt:		(rad_config.ar_sl_fileExt == 'false') ? false : rad_config.ar_sl_fileExt,
		// animationSpeed:	parseInt(rad_config.ar_sl_animationSpeed,10),
		// animationSlide: (rad_config.ar_sl_animationSlide === '1') ? true : false,
		// preloading:		(rad_config.ar_sl_preloading === '1') ? true : false,
		// enableKeyboard:	(rad_config.ar_sl_enableKeyboard === '1') ? true : false,
		// loop:			(rad_config.ar_sl_loop === '1') ? true : false,
		// rel:			(rad_config.ar_sl_rel == 'false') ? false : rad_config.ar_sl_rel,
		// docClose: 	 	(rad_config.ar_sl_docClose === '1') ? true : false,
		// swipeTolerance: parseInt(rad_config.ar_sl_swipeTolerance,10),
		// className:		rad_config.ar_sl_className,
		// widthRatio: 	rad_config.ar_sl_widthRatio,
		// heightRatio: 	rad_config.ar_sl_heightRatio,
		// scaleImageToRatio: (rad_config.ar_sl_scaleImageToRatio == '1') ? true : false,
		// disableRightClick:(rad_config.ar_sl_disableRightClick == '1') ? true : false,
		// disableScroll:	(rad_config.ar_sl_disableScroll == '1') ? true : false,
		// alertError:     (rad_config.ar_sl_alertError == '1') ? true : false
		// alertErrorMessage:rad_config.ar_sl_alertErrorMessage,
		// additionalHtml: rad_config.ar_sl_additionalHtml,
		// history:		(rad_config.ar_sl_history == '1') ? true : false,
		// throttleInterval:parseInt(rad_config.ar_sl_throttleInterval,10),
		// doubleTapZoom:	parseInt(rad_config.ar_sl_doubleTapZoom,10),
		// maxZoom:		parseInt(rad_config.ar_sl_maxZoom,10),
		// htmlClass:		rad_config.ar_sl_htmlClass,
		// rtl:			(rad_config.ar_sl_rtl == '1') ? true : false,
		// fixedClass:		rad_config.ar_sl_fixedClass,
		// fadeSpeed:		parseInt(rad_config.ar_sl_fadeSpeed,10),
		// uniqueImages:	(rad_config.ar_sl_uniqueImages == '1') ? true : false,
		// focus:			(rad_config.ar_sl_focus == '1') ? true : false,
		// scrollZoom:		(rad_config.ar_sl_scrollZoom == '1') ? true : false,
		// scrollZoomFactor:parseFloat(rad_config.ar_sl_scrollZoomFactor)
	}
	// fixing not working lightbox in some themes
	var anchors = document.querySelectorAll("a");
	var thumbnails = Array.from(anchors).filter(function (item) {
		return /\.(jpe?g|png|gif|mp4|webp|bmp)(\?[^/]*)*$/i.test(item.getAttribute("href"));
	});

	for (const thumbnail of thumbnails) {
		thumbnail.classList.add('simplelightbox');
	}

	if (document.querySelectorAll('a.simplelightbox').length) {
		var simplelightbox = new SimpleLightbox('a.simplelightbox', options);
	}

	if (rad_config.ar_sl_additionalSelectors) {
		var selectors = rad_config.ar_sl_additionalSelectors.split(',');
		for (var i = 0; i <= selectors.length; i++) {
			var selector = selectors[ i ];
			if (selector) {
				selector = selector.trim();
				if (selector != '' && document.querySelectorAll(selector).length) {
					let gallery = new SimpleLightbox(selector, options);
					console.log('it\'s made')
				}
			}
		}
	}

	// let gallery = new SimpleLightbox('.gallery a');
	simplelightbox.on('shown.simplelightbox', function () {
		// quickly fade-out the element with the class "sl-close"
		document.querySelector('.sl-close').style.opacity = 0;
		// wait for 500ms



		console.log("go!")
		// do somethingâ€¦
		centerCloseButton();
	});

	function centerCloseButton() {
		const slImageEl = document.querySelector('.sl-image');
		const slCloseEl = document.querySelector('.sl-close');

		// Get the coordinates of the top-right corner of the .sl-image element
		const { top, right } = slImageEl.getBoundingClientRect();
		const centerX = right;
		const centerY = top;

		// Set the position of .sl-close to the center of .sl-image
		slCloseEl.style.position = 'absolute';
		// slCloseEl.style.left = `${centerX - (slCloseEl.offsetWidth / 2)}px`;
		// slCloseEl.style.top = `${centerY - (slCloseEl.offsetHeight / 2)}px`;
		slCloseEl.style.left = `${centerX}px`;
		slCloseEl.style.top = `${centerY}px`;

		// Animate the movement of .sl-close to its updated coordinates
		/*slCloseEl.animate(
			[
				{ transform: `translate(${slCloseEl.style.left}, ${slCloseEl.style.top})` },
				{ transform: `translate(${centerX - (slCloseEl.offsetWidth / 2)}px, ${centerY - (slCloseEl.offsetHeight / 2)}px)` }
			],
			{
				duration: 500,
				easing: 'ease-in-out',
				fill: 'both'
			}
		);*/
	}

})();
